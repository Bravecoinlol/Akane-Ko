import discord
from discord.ext import commands
from discord import app_commands
import random
import json
import os
from typing import Dict
import asyncio
import logging
from datetime import datetime, timedelta

# Ë®≠ÂÆö logger
logger = logging.getLogger('MiniGames')

LEADERBOARD_FILE = 'minigames_leaderboard.json'

class LeaderboardManager:
    def __init__(self, file_path=LEADERBOARD_FILE):
        self.file_path = file_path
        self.data = {
            'guess_number': {},  # user_id: win_count
            'rps': {},           # user_id: win_count
            'minesweeper': {},    # user_id: win_count
            'tictactoe': {}  # Êñ∞Â¢û
        }
        self.load()

    def load(self):
        if os.path.exists(self.file_path):
            try:
                with open(self.file_path, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
            except Exception as e:
                logger.error(f"[Leaderboard] ËºâÂÖ•Â§±Êïó: {e}")
                self.data = {
                    'guess_number': {},
                    'rps': {},
                    'minesweeper': {},
                    'tictactoe': {}
                }

    def save(self):
        try:
            with open(self.file_path, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"[Leaderboard] ÂÑ≤Â≠òÂ§±Êïó: {e}")

    def add_win(self, game: str, user_id: int):
        game = game.lower()
        if game not in self.data:
            self.data[game] = {}
        uid = str(user_id)
        self.data[game][uid] = self.data[game].get(uid, 0) + 1
        self.save()

    def get_top(self, game: str, top_n=10) -> Dict[str, int]:
        game = game.lower()
        if game not in self.data:
            return {}
        return dict(sorted(self.data[game].items(), key=lambda x: x[1], reverse=True)[:top_n])

# Ë∏©Âú∞Èõ∑ÈÇèËºØÈ°ûÂà•
class MinesweeperGame:
    def __init__(self, size=5, bombs=5):
        self.size = size
        self.bombs = bombs
        self.board = [['‚¨ú' for _ in range(size)] for _ in range(size)]
        self.visible = [[False for _ in range(size)] for _ in range(size)]
        self.bomb_locations = set()
        self._place_bombs()

    def _place_bombs(self):
        while len(self.bomb_locations) < self.bombs:
            x, y = random.randint(0, self.size - 1), random.randint(0, self.size - 1)
            self.bomb_locations.add((x, y))

    def is_bomb(self, x, y):
        return (x, y) in self.bomb_locations

    def reveal_cell(self, x, y):
        if self.visible[x][y]:
            return False
        self.visible[x][y] = True
        if self.is_bomb(x, y):
            self.board[x][y] = 'üí£'
            return True
        count = self._adjacent_bomb_count(x, y)
        self.board[x][y] = str(count) if count > 0 else '‚¨õ'
        return False

    def _adjacent_bomb_count(self, x, y):
        count = 0
        for dx in (-1, 0, 1):
            for dy in (-1, 0, 1):
                if dx == dy == 0:
                    continue
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.size and 0 <= ny < self.size and (nx, ny) in self.bomb_locations:
                    count += 1
        return count

# ÊåâÈàïÊ†ºÂ≠ê
class MinesweeperButton(discord.ui.Button):
    def __init__(self, x: int, y: int, game: MinesweeperGame, view: discord.ui.View):
        super().__init__(label="‚¨ú", row=x, style=discord.ButtonStyle.secondary)
        self.x = x
        self.y = y
        self.game = game
        self.view = view

    async def callback(self, interaction: discord.Interaction):
        try:
            if self.view.game_over:
                await interaction.response.send_message("ÈÅäÊà≤Â∑≤Á∂ìÁµêÊùü‰∫ÜÂñîÔΩû", ephemeral=True)
                return

            if self.game.reveal_cell(self.x, self.y):
                self.label = "üí£"
                self.style = discord.ButtonStyle.danger
                self.view.game_over = True
                for item in self.view.children:
                    if isinstance(item, MinesweeperButton):
                        cx, cy = item.x, item.y
                        if (cx, cy) in self.game.bomb_locations:
                            item.label = 'üí£'
                            item.style = discord.ButtonStyle.danger
                            item.disabled = True
                await interaction.response.edit_message(content="üí• ‰Ω†Ë∏©Âà∞Âú∞Èõ∑Âï¶ÔºÅÈÅäÊà≤ÁµêÊùüÔºÅ", view=self.view)
            else:
                count = self.game._adjacent_bomb_count(self.x, self.y)
                self.label = str(count) if count > 0 else '‚¨õ'
                self.disabled = True
                self.style = discord.ButtonStyle.gray
                # Âà§Êñ∑ÊòØÂê¶Á†¥Èóú
                if self._check_win():
                    self.view.game_over = True
                    # Ë®òÈåÑÊéíË°åÊ¶ú
                    cog = interaction.client.get_cog("MiniGames")
                    if cog and hasattr(cog, 'leaderboard_manager'):
                        cog.leaderboard_manager.add_win('minesweeper', interaction.user.id)
                    await interaction.response.edit_message(content="üéâ ÊÅ≠Âñú‰Ω†Á†¥ÈóúË∏©Âú∞Èõ∑ÔºÅ", view=self.view)
                else:
                    await interaction.response.edit_message(view=self.view)
        except Exception as e:
            logger.error(f"[MinesweeperButton] ÂõûË™øËôïÁêÜÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ËôïÁêÜË∏©Âú∞Èõ∑ÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    def _check_win(self):
        # Ê≤íÊúâË∏©Âà∞Âú∞Èõ∑‰∏îÊâÄÊúâÈùûÂú∞Èõ∑Ê†ºÈÉΩË¢´Êè≠Èñã
        for x in range(self.game.size):
            for y in range(self.game.size):
                if not self.game.is_bomb(x, y) and not self.game.visible[x][y]:
                    return False
        return True

class MinesweeperGameView(discord.ui.View):
    def __init__(self, game: MinesweeperGame):
        super().__init__(timeout=180)
        self.game = game
        self.game_over = False
        for x in range(game.size):
            for y in range(game.size):
                self.add_item(MinesweeperButton(x, y, game, self))

    async def on_timeout(self):
        try:
            for child in self.children:
                child.disabled = True
            logger.info(f"[MinesweeperGameView] ÈÅäÊà≤Ë∂ÖÊôÇÔºåÂ∑≤ÁµêÊùü")
        except Exception as e:
            logger.error(f"[MinesweeperGameView] Ë∂ÖÊôÇËôïÁêÜÂ§±Êïó: {e}")

# ‰∏ªÂ∞èÈÅäÊà≤ Cog
class MiniGames(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.guess_numbers = {}  # Â≠òÂÑ≤Áî®Êà∂ÁöÑÊï∏Â≠ó
        self.custom_numbers = {}  # Â≠òÂÑ≤Ëá™ÂÆöÁæ©Êï∏Â≠óÈÅäÊà≤
        self.leaderboard_manager = LeaderboardManager()
        self.tictactoe_games = {}

    @app_commands.command(name="ÁåúÊï∏Â≠ó", description="ÈñãÂßã‰∏ÄÂ†¥ÁåúÊï∏Â≠óÈÅäÊà≤")
    @app_commands.describe(mode="ÈÅ∏ÊìáÈÅäÊà≤Ê®°Âºè")
    @app_commands.choices(mode=[
        app_commands.Choice(name="Èö®Ê©üÊï∏Â≠ó (1-100)", value="random"),
        app_commands.Choice(name="Ëá™ÂÆöÁæ©Êï∏Â≠ó", value="custom")
    ])
    async def guess_number(self, interaction: discord.Interaction, mode: app_commands.Choice[str] = None):
        try:
            if mode is None or mode.value == "random":
                # Èö®Ê©üÊï∏Â≠óÊ®°Âºè
                number = random.randint(1, 100)
                self.guess_numbers[interaction.user.id] = number
                
                embed = discord.Embed(
                    title="üé≤ ÁåúÊï∏Â≠óÈÅäÊà≤ÈñãÂßãÔºÅ",
                    description="ÊàëÂ∑≤Á∂ìÊÉ≥Â•Ω‰∫Ü‰∏ÄÂÄã 1-100 ‰πãÈñìÁöÑÊï∏Â≠ó",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="ÈÅäÊà≤Ë¶èÂâá",
                    value="‚Ä¢ ÂõûË¶ÜÈÄôÂâáË®äÊÅØ‰∏¶Ëº∏ÂÖ•‰Ω†ÁåúÁöÑÊï∏Â≠ó\n‚Ä¢ ÊàëÊúÉÂëäË®¥‰Ω†ÁåúÁöÑÊï∏Â≠óÊòØÂ§™Â§ßÈÇÑÊòØÂ§™Â∞è\n‚Ä¢ ÁåúÂ∞çÂ∞±Ë¥è‰∫ÜÔºÅ",
                    inline=False
                )
                embed.add_field(
                    name="ÈñãÂßãÁåúÊ∏¨",
                    value="Ë´ãÂõûË¶ÜÈÄôÂâáË®äÊÅØ‰∏¶Ëº∏ÂÖ•‰Ω†ÁöÑÁåúÊ∏¨Êï∏Â≠ó",
                    inline=False
                )
                embed.set_footer(text="ÈÅäÊà≤ÊúÉÊåÅÁ∫åÂà∞ÁåúÂ∞çÁÇ∫Ê≠¢")
                
                await interaction.response.send_message(embed=embed)
                
            elif mode.value == "custom":
                # Ëá™ÂÆöÁæ©Êï∏Â≠óÊ®°Âºè
                if interaction.channel.id in self.custom_numbers:
                    await interaction.response.send_message("‚ùå Ê≠§È†ªÈÅìÂ∑≤ÊúâÈÄ≤Ë°å‰∏≠ÁöÑËá™ÂÆöÁæ©ÁåúÊï∏Â≠óÈÅäÊà≤ÔºÅ", ephemeral=True)
                    return
                
                view = CustomNumberView(interaction.user, self)
                embed = discord.Embed(
                    title="üéØ Ëá™ÂÆöÁæ©ÁåúÊï∏Â≠óÈÅäÊà≤",
                    description="Ë´ãÈÅ∏ÊìáÊï∏Â≠óÁØÑÂúçÔºåÁÑ∂ÂæåË®≠ÂÆöÊ≠£Á¢∫Á≠îÊ°à",
                    color=discord.Color.green()
                )
                embed.add_field(
                    name="ÈÅäÊà≤Ë®≠ÂÆö",
                    value="‚Ä¢ ÈÅ∏ÊìáÊï∏Â≠óÁØÑÂúç\n‚Ä¢ Ë®≠ÂÆöÊ≠£Á¢∫Á≠îÊ°à\n‚Ä¢ ÂÖ∂‰ªñÁé©ÂÆ∂ÂèØ‰ª•ÁåúÊ∏¨",
                    inline=False
                )
                await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
                
        except Exception as e:
            logger.error(f"[guess_number] ÈñãÂßãÁåúÊï∏Â≠óÈÅäÊà≤Â§±Êïó: {e}")
            try:
                embed = discord.Embed(
                    title="‚ùå ÈÅäÊà≤ÂïüÂãïÂ§±Êïó",
                    description="ÈñãÂßãÁåúÊï∏Â≠óÈÅäÊà≤ÊôÇÁôºÁîüÈåØË™§",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="ÈåØË™§Ë©≥ÊÉÖ",
                    value=str(e)[:100] + "..." if len(str(e)) > 100 else str(e),
                    inline=False
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
            except:
                logger.error(f"[guess_number] ÁÑ°Ê≥ïÁôºÈÄÅÈåØË™§Ë®äÊÅØ: {e}")

    @commands.Cog.listener()
    async def on_message(self, message):
        """Áõ£ËÅΩË®äÊÅØ‰æÜËôïÁêÜÁåúÊï∏Â≠óÈÅäÊà≤"""
        logger.info(f"[on_message] Êî∂Âà∞Ë®äÊÅØ: {message.content}, author: {message.author}, reference: {message.reference}")
        try:
            # ÂøΩÁï• Bot Ë®äÊÅØ
            if message.author.bot:
                logger.info("[on_message] ÂøΩÁï• bot Ë®äÊÅØ")
                return
            # Ê™¢Êü•ÊòØÂê¶ÁÇ∫ÂõûË¶ÜË®äÊÅØ
            if not message.reference:
                logger.info("[on_message] ÈùûÂõûË¶ÜË®äÊÅØÔºåÂøΩÁï•")
                return
            # Áç≤ÂèñË¢´ÂõûË¶ÜÁöÑË®äÊÅØ
            try:
                replied_message = await message.channel.fetch_message(message.reference.message_id)
            except Exception as e:
                logger.info(f"[on_message] ÁÑ°Ê≥ïÂèñÂæóË¢´ÂõûË¶ÜË®äÊÅØ: {e}")
                return
            # Ê™¢Êü•Ë¢´ÂõûË¶ÜÁöÑË®äÊÅØÊòØÂê¶ÁÇ∫ Bot ÁöÑÁåúÊï∏Â≠óÈÅäÊà≤Ë®äÊÅØ
            if replied_message.author.id != self.bot.user.id:
                logger.info("[on_message] Ë¢´ÂõûË¶ÜË®äÊÅØ‰∏çÊòØ bot ÁôºÁöÑÔºåÂøΩÁï•")
                return
            # ÂòóË©¶Ëß£ÊûêÊï∏Â≠ó
            try:
                guess = int(message.content.strip())
            except ValueError:
                logger.info("[on_message] Ëº∏ÂÖ•‰∏çÊòØÊúâÊïàÊï∏Â≠ó")
                embed = discord.Embed(
                    title="‚ùå ÁÑ°ÊïàËº∏ÂÖ•",
                    description="Ë´ãËº∏ÂÖ•‰∏ÄÂÄãÊúâÊïàÁöÑÊï∏Â≠ó",
                    color=discord.Color.red()
                )
                await message.reply(embed=embed, mention_author=False)
                return
            # ËôïÁêÜÁåúÊï∏Â≠óÈÇèËºØ
            logger.info(f"[on_message] ÈÄ≤ÂÖ•ÁåúÊï∏Â≠óÈÇèËºØÔºåguess={guess}")
            await self.process_guess(message, guess, replied_message)
        except Exception as e:
            logger.error(f"[on_message] ËôïÁêÜÁåúÊï∏Â≠óÂõûË¶ÜÂ§±Êïó: {e}")
            try:
                embed = discord.Embed(
                    title="‚ùå ËôïÁêÜÂ§±Êïó",
                    description="ËôïÁêÜÁåúÊï∏Â≠óÊôÇÁôºÁîüÈåØË™§",
                    color=discord.Color.red()
                )
                await message.reply(embed=embed, mention_author=False)
            except:
                pass
        await self.bot.process_commands(message)

    async def process_guess(self, message, guess, game_message):
        """ËôïÁêÜÁåúÊï∏Â≠óÈÇèËºØ"""
        try:
            # Ê™¢Êü•ÊòØÂê¶Âú®Ëá™ÂÆöÁæ©Êï∏Â≠óÈÅäÊà≤‰∏≠
            custom_game = self.custom_numbers.get(message.channel.id)
            if custom_game:
                number = custom_game['number']
                if guess == number:
                    embed = discord.Embed(
                        title="üéâ ÊÅ≠ÂñúÁåúÂ∞ç‰∫ÜÔºÅ",
                        description=f"**{message.author.mention}** ÁåúÂ∞ç‰∫ÜÔºÅÊ≠£Á¢∫Á≠îÊ°àÊòØÔºö**{number}**",
                        color=discord.Color.green()
                    )
                    embed.add_field(
                        name="ÈÅäÊà≤ÁµêÊùü",
                        value="Ëá™ÂÆöÁæ©ÁåúÊï∏Â≠óÈÅäÊà≤Â∑≤ÁµêÊùü",
                        inline=False
                    )
                    embed.set_footer(text=f"Áç≤ÂãùËÄÖ: {message.author.display_name}")
                    del self.custom_numbers[message.channel.id]
                    await message.reply(embed=embed, mention_author=False)
                    return
                elif guess < number:
                    embed = discord.Embed(
                        title="üìà Â§™Â∞è‰∫ÜÔºÅ",
                        description=f"**{message.author.mention}** ÁåúÁöÑ **{guess}** Â§™Â∞è‰∫Ü",
                        color=discord.Color.blue()
                    )
                    embed.add_field(
                        name="ÊèêÁ§∫",
                        value="Ë©¶Ë©¶Êõ¥Â§ßÁöÑÊï∏Â≠ó",
                        inline=False
                    )
                    await message.reply(embed=embed, mention_author=False)
                    return
                else:
                    embed = discord.Embed(
                        title="üìâ Â§™Â§ß‰∫ÜÔºÅ",
                        description=f"**{message.author.mention}** ÁåúÁöÑ **{guess}** Â§™Â§ß‰∫Ü",
                        color=discord.Color.orange()
                    )
                    embed.add_field(
                        name="ÊèêÁ§∫",
                        value="Ë©¶Ë©¶Êõ¥Â∞èÁöÑÊï∏Â≠ó",
                        inline=False
                    )
                    await message.reply(embed=embed, mention_author=False)
                    return

            # Ê™¢Êü•ÊòØÂê¶Âú®ÂÄã‰∫∫Èö®Ê©üÊï∏Â≠óÈÅäÊà≤‰∏≠
            if message.author.id not in self.guess_numbers:
                embed = discord.Embed(
                    title="‚ùå Ê≤íÊúâÈÄ≤Ë°å‰∏≠ÁöÑÈÅäÊà≤",
                    description="Ë´ãÂÖà‰ΩøÁî® `/ÁåúÊï∏Â≠ó` ÈñãÂßãÈÅäÊà≤",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="Â¶Ç‰ΩïÈñãÂßã",
                    value="‰ΩøÁî® `/ÁåúÊï∏Â≠ó` ÂëΩ‰ª§ÈñãÂßãÊñ∞ÁöÑÈÅäÊà≤",
                    inline=False
                )
                await message.reply(embed=embed, mention_author=False)
                return

            number = self.guess_numbers[message.author.id]
            
            # Ê™¢Êü•ÁåúÊ∏¨ÁØÑÂúç
            if guess < 1 or guess > 100:
                embed = discord.Embed(
                    title="‚ùå Êï∏Â≠óÁØÑÂúçÈåØË™§",
                    description="Ë´ãÁåúÊ∏¨ 1-100 ‰πãÈñìÁöÑÊï∏Â≠ó",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="Ê≠£Á¢∫ÁØÑÂúç",
                    value="1 Âà∞ 100 ‰πãÈñìÁöÑÊï¥Êï∏",
                    inline=False
                )
                await message.reply(embed=embed, mention_author=False)
                return
        
            if guess == number:
                embed = discord.Embed(
                    title="üéâ ÊÅ≠Âñú‰Ω†ÁåúÂ∞ç‰∫ÜÔºÅ",
                    description=f"**{message.author.mention}** ÁåúÂ∞ç‰∫ÜÔºÅÊ≠£Á¢∫Á≠îÊ°àÊòØÔºö**{number}**",
                    color=discord.Color.green()
                )
                embed.add_field(
                    name="ÈÅäÊà≤ÁµêÊùü",
                    value="ÁåúÊï∏Â≠óÈÅäÊà≤Â∑≤ÁµêÊùü",
                    inline=False
                )
                embed.set_footer(text=f"Áç≤ÂãùËÄÖ: {message.author.display_name}")
                del self.guess_numbers[message.author.id]
                self.leaderboard_manager.add_win('guess_number', message.author.id)
                await message.reply(embed=embed, mention_author=False)
            elif guess < number:
                embed = discord.Embed(
                    title="üìà Â§™Â∞è‰∫ÜÔºÅ",
                    description=f"**{message.author.mention}** ÁåúÁöÑ **{guess}** Â§™Â∞è‰∫Ü",
                    color=discord.Color.blue()
                )
                embed.add_field(
                    name="ÊèêÁ§∫",
                    value="Ë©¶Ë©¶Êõ¥Â§ßÁöÑÊï∏Â≠ó",
                    inline=False
                )
                await message.reply(embed=embed, mention_author=False)
            else:
                embed = discord.Embed(
                    title="üìâ Â§™Â§ß‰∫ÜÔºÅ",
                    description=f"**{message.author.mention}** ÁåúÁöÑ **{guess}** Â§™Â§ß‰∫Ü",
                    color=discord.Color.orange()
                )
                embed.add_field(
                    name="ÊèêÁ§∫",
                    value="Ë©¶Ë©¶Êõ¥Â∞èÁöÑÊï∏Â≠ó",
                    inline=False
                )
                await message.reply(embed=embed, mention_author=False)
                
        except Exception as e:
            logger.error(f"[process_guess] ËôïÁêÜÁåúÊï∏Â≠óÂ§±Êïó: {e}")
            try:
                embed = discord.Embed(
                    title="‚ùå ËôïÁêÜÂ§±Êïó",
                    description="ËôïÁêÜÁåúÊï∏Â≠óÊôÇÁôºÁîüÈåØË™§",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="ÈåØË™§Ë©≥ÊÉÖ",
                    value=str(e)[:100] + "..." if len(str(e)) > 100 else str(e),
                    inline=False
                )
                await message.reply(embed=embed, mention_author=False)
            except:
                pass

    @app_commands.command(name="ÁµêÊùüÁåúÊï∏Â≠ó", description="ÁµêÊùüÁï∂ÂâçÁöÑËá™ÂÆöÁæ©ÁåúÊï∏Â≠óÈÅäÊà≤")
    async def end_guess_number(self, interaction: discord.Interaction):
        custom_game = self.custom_numbers.get(interaction.channel.id)
        if not custom_game:
            await interaction.response.send_message("ÁõÆÂâçÊ≤íÊúâÈÄ≤Ë°å‰∏≠ÁöÑËá™ÂÆöÁæ©ÁåúÊï∏Â≠óÈÅäÊà≤ÔºÅ", ephemeral=True)
            return
        
        if custom_game['host'] != interaction.user.id:
            await interaction.response.send_message("Âè™ÊúâÈÅäÊà≤‰∏ªÊåÅ‰∫∫ÊâçËÉΩÁµêÊùüÈÅäÊà≤ÔºÅ", ephemeral=True)
            return
        
        number = custom_game['number']
        del self.custom_numbers[interaction.channel.id]
        await interaction.response.send_message(f"ÈÅäÊà≤Â∑≤ÁµêÊùüÔºÅÊ≠£Á¢∫Á≠îÊ°àÊòØÔºö{number}")

    @app_commands.command(name="Ââ™ÂàÄÁü≥È†≠Â∏É", description="‰æÜÂ†¥Ââ™ÂàÄÁü≥È†≠Â∏ÉÂêßÔºÅ")
    async def rps(self, interaction: discord.Interaction):
        view = RPSView()
        await interaction.response.send_message("Ë´ãÈÅ∏Êìá‰Ω†Ë¶ÅÂá∫ÁöÑÔºö", view=view, ephemeral=True)

    @app_commands.command(name="ÂúàÂúàÂèâÂèâ", description="ÈñãÂßã‰∏ÄÂ†¥ÂúàÂúàÂèâÂèâ")
    @app_commands.describe(opponent="‰Ω†Ë¶ÅÂ∞çÊà∞ÁöÑÂ∞çÊâã")
    async def tictactoe(self, interaction: discord.Interaction, opponent: discord.Member):
        if opponent.bot or opponent == interaction.user:
            await interaction.response.send_message("Ë´ãÈÅ∏Êìá‰∏ÄÂÄãÁúüÂØ¶ÁöÑÂ∞çÊâãÔºà‰∏çËÉΩÊòØ‰Ω†Ëá™Â∑±ÊàñÊ©üÂô®‰∫∫ÔºâÔºÅ", ephemeral=True)
            return
        view = TicTacToeRequestView(interaction.user, opponent, self)
        await interaction.response.send_message(f"{opponent.mention}Ôºå{interaction.user.mention} ÊÉ≥Âíå‰Ω†‰æÜÂ†¥ÂúàÂúàÂèâÂèâÔºåÊòØÂê¶Êé•ÂèóÔºü", view=view)

    @app_commands.command(name="Ë∏©Âú∞Èõ∑", description="ÈñãÂßãË∏©Âú∞Èõ∑ÈÅäÊà≤ÔºàÂñÆ‰∫∫ÊàñÂ∞çÊà∞Ôºâ")
    async def minesweeper_mode(self, interaction: discord.Interaction):
        view = MinesweeperModeView()
        await interaction.response.send_message("Ë´ãÈÅ∏ÊìáÈÅäÊà≤Ê®°ÂºèÔºö", view=view, ephemeral=True)

    @app_commands.command(name="ÁåúÊï∏Â≠óÊéíË°å", description="ÁåúÊï∏Â≠óÊéíË°åÊ¶úÔºàÂâç10ÂêçÔºâ")
    async def guess_number_leaderboard(self, interaction: discord.Interaction):
        try:
            top = self.leaderboard_manager.get_top('guess_number')
            if not top:
                embed = discord.Embed(
                    title="üìä ÁåúÊï∏Â≠óÊéíË°åÊ¶ú",
                    description="ÁõÆÂâçÈÇÑÊ≤íÊúâ‰ªª‰ΩïÁåúÊï∏Â≠óÁ¥ÄÈåÑÔºÅ",
                    color=discord.Color.orange()
                )
                embed.add_field(
                    name="üí° ÊèêÁ§∫",
                    value="ÈñãÂßãÁé©ÁåúÊï∏Â≠óÈÅäÊà≤‰æÜÁç≤ÂæóÁ¥ÄÈåÑÂêßÔºÅ",
                    inline=False
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            embed = discord.Embed(title="üìä ÁåúÊï∏Â≠óÊéíË°åÊ¶úÔºàÂâç10ÂêçÔºâ", color=discord.Color.gold())
            for idx, (uid, count) in enumerate(top.items(), 1):
                try:
                    user = await self.bot.fetch_user(int(uid))
                    embed.add_field(name=f"#{idx} {user.display_name}", value=f"ÂãùÂ†¥Ôºö{count}", inline=False)
                except discord.NotFound:
                    embed.add_field(name=f"#{idx} Êú™Áü•Áî®Êà∂", value=f"ÂãùÂ†¥Ôºö{count} (Áî®Êà∂Â∑≤Âà™Èô§)", inline=False)
                except Exception as e:
                    logger.error(f"Áç≤ÂèñÁî®Êà∂Ë≥áË®äÂ§±Êïó: {e}")
                    embed.add_field(name=f"#{idx} ËºâÂÖ•Â§±Êïó", value=f"ÂãùÂ†¥Ôºö{count}", inline=False)
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            logger.error(f"È°ØÁ§∫ÁåúÊï∏Â≠óÊéíË°åÊ¶úÂ§±Êïó: {e}")
            await interaction.response.send_message(f"‚ùå ËºâÂÖ•ÊéíË°åÊ¶úÂ§±ÊïóÔºö{str(e)}", ephemeral=True)

    @app_commands.command(name="Ââ™ÂàÄÁü≥È†≠Â∏ÉÊéíË°å", description="Ââ™ÂàÄÁü≥È†≠Â∏ÉÊéíË°åÊ¶úÔºàÂâç10ÂêçÔºâ")
    async def rps_leaderboard(self, interaction: discord.Interaction):
        try:
            top = self.leaderboard_manager.get_top('rps')
            if not top:
                embed = discord.Embed(
                    title="üìä Ââ™ÂàÄÁü≥È†≠Â∏ÉÊéíË°åÊ¶ú",
                    description="ÁõÆÂâçÈÇÑÊ≤íÊúâ‰ªª‰ΩïÂâ™ÂàÄÁü≥È†≠Â∏ÉÁ¥ÄÈåÑÔºÅ",
                    color=discord.Color.orange()
                )
                embed.add_field(
                    name="üí° ÊèêÁ§∫",
                    value="ÈñãÂßãÁé©Ââ™ÂàÄÁü≥È†≠Â∏É‰æÜÁç≤ÂæóÁ¥ÄÈåÑÂêßÔºÅ",
                    inline=False
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            embed = discord.Embed(title="üìä Ââ™ÂàÄÁü≥È†≠Â∏ÉÊéíË°åÊ¶úÔºàÂâç10ÂêçÔºâ", color=discord.Color.blue())
            for idx, (uid, count) in enumerate(top.items(), 1):
                try:
                    user = await self.bot.fetch_user(int(uid))
                    embed.add_field(name=f"#{idx} {user.display_name}", value=f"ÂãùÂ†¥Ôºö{count}", inline=False)
                except discord.NotFound:
                    embed.add_field(name=f"#{idx} Êú™Áü•Áî®Êà∂", value=f"ÂãùÂ†¥Ôºö{count} (Áî®Êà∂Â∑≤Âà™Èô§)", inline=False)
                except Exception as e:
                    logger.error(f"Áç≤ÂèñÁî®Êà∂Ë≥áË®äÂ§±Êïó: {e}")
                    embed.add_field(name=f"#{idx} ËºâÂÖ•Â§±Êïó", value=f"ÂãùÂ†¥Ôºö{count}", inline=False)
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            logger.error(f"È°ØÁ§∫Ââ™ÂàÄÁü≥È†≠Â∏ÉÊéíË°åÊ¶úÂ§±Êïó: {e}")
            await interaction.response.send_message(f"‚ùå ËºâÂÖ•ÊéíË°åÊ¶úÂ§±ÊïóÔºö{str(e)}", ephemeral=True)

    @app_commands.command(name="Ë∏©Âú∞Èõ∑ÊéíË°å", description="Ë∏©Âú∞Èõ∑ÊéíË°åÊ¶úÔºàÂâç10ÂêçÔºâ")
    async def minesweeper_leaderboard(self, interaction: discord.Interaction):
        try:
            top = self.leaderboard_manager.get_top('minesweeper')
            if not top:
                embed = discord.Embed(
                    title="üìä Ë∏©Âú∞Èõ∑ÊéíË°åÊ¶ú",
                    description="ÁõÆÂâçÈÇÑÊ≤íÊúâ‰ªª‰ΩïË∏©Âú∞Èõ∑Á¥ÄÈåÑÔºÅ",
                    color=discord.Color.orange()
                )
                embed.add_field(
                    name="üí° ÊèêÁ§∫",
                    value="ÈñãÂßãÁé©Ë∏©Âú∞Èõ∑‰æÜÁç≤ÂæóÁ¥ÄÈåÑÂêßÔºÅ",
                    inline=False
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            embed = discord.Embed(title="üìä Ë∏©Âú∞Èõ∑ÊéíË°åÊ¶úÔºàÂâç10ÂêçÔºâ", color=discord.Color.green())
            for idx, (uid, count) in enumerate(top.items(), 1):
                try:
                    user = await self.bot.fetch_user(int(uid))
                    embed.add_field(name=f"#{idx} {user.display_name}", value=f"Á†¥ÈóúÊ¨°Êï∏Ôºö{count}", inline=False)
                except discord.NotFound:
                    embed.add_field(name=f"#{idx} Êú™Áü•Áî®Êà∂", value=f"Á†¥ÈóúÊ¨°Êï∏Ôºö{count} (Áî®Êà∂Â∑≤Âà™Èô§)", inline=False)
                except Exception as e:
                    logger.error(f"Áç≤ÂèñÁî®Êà∂Ë≥áË®äÂ§±Êïó: {e}")
                    embed.add_field(name=f"#{idx} ËºâÂÖ•Â§±Êïó", value=f"Á†¥ÈóúÊ¨°Êï∏Ôºö{count}", inline=False)
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            logger.error(f"È°ØÁ§∫Ë∏©Âú∞Èõ∑ÊéíË°åÊ¶úÂ§±Êïó: {e}")
            await interaction.response.send_message(f"‚ùå ËºâÂÖ•ÊéíË°åÊ¶úÂ§±ÊïóÔºö{str(e)}", ephemeral=True)

class RPSView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=15)

    @discord.ui.button(label="Ââ™ÂàÄ", emoji="‚úÇÔ∏è", style=discord.ButtonStyle.primary)
    async def scissor(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await self.resolve(interaction, "Ââ™ÂàÄ")
        except Exception as e:
            logger.error(f"[RPSView] Ââ™ÂàÄÈÅ∏ÊìáÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ÈÅ∏ÊìáÂâ™ÂàÄÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="Áü≥È†≠", emoji="‚úä", style=discord.ButtonStyle.success)
    async def rock(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await self.resolve(interaction, "Áü≥È†≠")
        except Exception as e:
            logger.error(f"[RPSView] Áü≥È†≠ÈÅ∏ÊìáÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ÈÅ∏ÊìáÁü≥È†≠ÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="Â∏É", emoji="‚úã", style=discord.ButtonStyle.danger)
    async def paper(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await self.resolve(interaction, "Â∏É")
        except Exception as e:
            logger.error(f"[RPSView] Â∏ÉÈÅ∏ÊìáÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ÈÅ∏ÊìáÂ∏ÉÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    async def resolve(self, interaction: discord.Interaction, user_choice: str):
        try:
            choices = ["Ââ™ÂàÄ", "Áü≥È†≠", "Â∏É"]
            bot_choice = random.choice(choices)
            result = get_rps_result(user_choice, bot_choice)
            if result == "‰Ω†Ë¥è‰∫ÜÔºÅ":
                cog = interaction.client.get_cog("MiniGames")
                if cog and hasattr(cog, 'leaderboard_manager'):
                    cog.leaderboard_manager.add_win('rps', interaction.user.id)
            await interaction.response.edit_message(content=f"‰Ω†Âá∫ÁöÑÊòØÔºö{user_choice}ÔºåÊàëÂá∫ÁöÑÊòØÔºö{bot_choice}ÔºåÁµêÊûúÔºö{result}", view=None)
        except Exception as e:
            logger.error(f"[RPSView] ËôïÁêÜÂâ™ÂàÄÁü≥È†≠Â∏ÉÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ËôïÁêÜÂâ™ÂàÄÁü≥È†≠Â∏ÉÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

class TicTacToeRequestView(discord.ui.View):
    def __init__(self, challenger: discord.User, opponent: discord.User, cog):
        super().__init__(timeout=30)
        self.challenger = challenger
        self.opponent = opponent
        self.cog = cog

    async def on_timeout(self):
        try:
            for child in self.children:
                child.disabled = True
            logger.info(f"[TicTacToeRequestView] ÊåëÊà∞ÈÄæÊôÇÊú™ÂõûÊáâÔºåÂèñÊ∂àÂ∞çÊà∞")
        except Exception as e:
            logger.error(f"[TicTacToeRequestView] Ë∂ÖÊôÇËôïÁêÜÂ§±Êïó: {e}")

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return True

    @discord.ui.button(label="Êé•ÂèóÊåëÊà∞", style=discord.ButtonStyle.success)
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.opponent:
            await interaction.response.send_message("‚ùå ÈÄô‰∏çÊòØ‰Ω†Ë¶ÅÊé•ÂèóÁöÑÊåëÊà∞ÂñîÔΩû", ephemeral=True)
            return
        
        try:
            # ÂÖàÂõûÊáâ‰∫íÂãïÔºåÈÅøÂÖç‰∫§‰∫íÂ§±Êïó
            await interaction.response.defer()
            
            # Á¶ÅÁî®ÊâÄÊúâÊåâÈàï
            for child in self.children:
                child.disabled = True
            
            # ÂïüÂãï TicTacToeGameView
            view = TicTacToeGameView(self.challenger, self.opponent, self.cog)
            
            try:
                # ÂòóË©¶Á∑®ËºØÂéüÂßãË®äÊÅØ
                await interaction.message.edit(content=f"üéÆ ÊØîË≥ΩÈñãÂßãÔºÅ{self.challenger.mention} (‚≠ï) Â∞ç‰∏ä {self.opponent.mention} (‚ùå)\nË´ã {self.challenger.mention} ÂÖà‰∏ãÊ£ãÔºÅ", view=view)
            except discord.Forbidden:
                # Â¶ÇÊûúÊ≤íÊúâÁ∑®ËºØÊ¨äÈôêÔºåÁôºÈÄÅÊñ∞Ë®äÊÅØ
                logger.warning(f"[TicTacToe] Ê≤íÊúâÁ∑®ËºØË®äÊÅØÊ¨äÈôê")
                await interaction.followup.send(content=f"üéÆ ÊØîË≥ΩÈñãÂßãÔºÅ{self.challenger.mention} (‚≠ï) Â∞ç‰∏ä {self.opponent.mention} (‚ùå)\nË´ã {self.challenger.mention} ÂÖà‰∏ãÊ£ãÔºÅ", view=view)
            except discord.HTTPException as e:
                # Â¶ÇÊûúÁ∑®ËºØÂ§±ÊïóÔºåÁôºÈÄÅÊñ∞Ë®äÊÅØ
                logger.error(f"[TicTacToe] Á∑®ËºØË®äÊÅØÂ§±Êïó: {e}")
                try:
                    await interaction.followup.send(content=f"üéÆ ÊØîË≥ΩÈñãÂßãÔºÅ{self.challenger.mention} (‚≠ï) Â∞ç‰∏ä {self.opponent.mention} (‚ùå)\nË´ã {self.challenger.mention} ÂÖà‰∏ãÊ£ãÔºÅ", view=view)
                except:
                    pass
            except Exception as e:
                logger.error(f"[TicTacToe] Êú™Áü•ÈåØË™§: {e}")
                try:
                    await interaction.followup.send("‚ùå ÂïüÂãïÈÅäÊà≤ÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
                except:
                    pass
                return
            
            # Ë®òÈåÑÈÅäÊà≤
            key = tuple(sorted([self.challenger.id, self.opponent.id]))
            self.cog.tictactoe_games[key] = view
            
        except Exception as e:
            logger.error(f"[TicTacToe] Êé•ÂèóÊåëÊà∞Â§±Êïó: {e}")
            try:
                await interaction.followup.send(f"‚ùå Êé•ÂèóÊåëÊà∞Â§±ÊïóÔºö{str(e)}", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="ÊãíÁµïÊåëÊà∞", style=discord.ButtonStyle.danger)
    async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.opponent:
            await interaction.response.send_message("‚ùå ÈÄô‰∏çÊòØ‰Ω†Ë¶ÅÊãíÁµïÁöÑÊåëÊà∞ÂñîÔΩû", ephemeral=True)
            return
        
        try:
            for child in self.children:
                child.disabled = True
            await interaction.response.edit_message(content=f"‚ùå {self.opponent.mention} ÊãíÁµï‰∫Ü {self.challenger.mention} ÁöÑÊåëÊà∞„ÄÇ", view=self)
        except Exception as e:
            logger.error(f"[TicTacToe] ÊãíÁµïÊåëÊà∞Â§±Êïó: {e}")
            try:
                await interaction.response.send_message(f"‚ùå ÊãíÁµïÊåëÊà∞Â§±ÊïóÔºö{str(e)}", ephemeral=True)
            except:
                pass

class MinesweeperModeView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=30)

    async def on_timeout(self):
        try:
            for child in self.children:
                child.disabled = True
            logger.info(f"[MinesweeperModeView] Ê≤íÊúâÈÅ∏ÊìáÊ®°ÂºèÔºåÂ∑≤ÂèñÊ∂àÈÅäÊà≤")
        except Exception as e:
            logger.error(f"[MinesweeperModeView] Ë∂ÖÊôÇËôïÁêÜÂ§±Êïó: {e}")

    @discord.ui.button(label="ÂñÆ‰∫∫Ê®°Âºè", style=discord.ButtonStyle.primary)
    async def single_mode(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            game = MinesweeperGame(size=5, bombs=5)
            view = MinesweeperGameView(game)
            await interaction.response.edit_message(content="üí£ Ë∏©Âú∞Èõ∑ÈÅäÊà≤ÈñãÂßãÔºÅÈªûÊìäÊ†ºÂ≠ê‰æÜÊè≠ÈñãÔºåÂ∞èÂøÉ‰∏çË¶ÅË∏©Âà∞Âú∞Èõ∑ÂñîÔºÅ", view=view)
        except Exception as e:
            logger.error(f"[Minesweeper] ÂïüÂãïÂñÆ‰∫∫Ê®°ÂºèÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message(f"‚ùå ÂïüÂãïÈÅäÊà≤Â§±ÊïóÔºö{str(e)}", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="Â∞çÊà∞Ê®°Âºè", style=discord.ButtonStyle.success)
    async def versus_mode(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.send_message("üí£ Â∞çÊà∞Ê®°ÂºèÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠ÔºåÊï¨Ë´ãÊúüÂæÖÔºÅ", ephemeral=True)
        except Exception as e:
            logger.error(f"[Minesweeper] Â∞çÊà∞Ê®°ÂºèÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message(f"‚ùå ÂïüÂãïÂ∞çÊà∞Ê®°ÂºèÂ§±ÊïóÔºö{str(e)}", ephemeral=True)
            except:
                pass

class TicTacToeGameView(discord.ui.View):
    def __init__(self, player1, player2, cog):
        super().__init__(timeout=180)
        self.player1 = player1
        self.player2 = player2
        self.cog = cog
        self.board = [[None for _ in range(3)] for _ in range(3)]
        self.current = player1  # ÂÖàÊâã
        self.game_over = False
        for x in range(3):
            for y in range(3):
                self.add_item(TicTacToeButton(x, y, self))

    async def on_timeout(self):
        try:
            for child in self.children:
                child.disabled = True
            logger.info(f"[TicTacToeGameView] Â∞çÊà∞ÈÄæÊôÇÊú™ÂÆåÊàêÔºåÈÅäÊà≤ÁµêÊùü")
        except Exception as e:
            logger.error(f"[TicTacToeGameView] ÈÄæÊôÇËôïÁêÜÂ§±Êïó: {e}")
        self._cleanup()

    def _cleanup(self):
        key = tuple(sorted([self.player1.id, self.player2.id]))
        if key in self.cog.tictactoe_games:
            del self.cog.tictactoe_games[key]

    def check_win(self, symbol):
        # Ê©´„ÄÅÁõ¥„ÄÅÊñúÁ∑öÂà§Êñ∑
        for i in range(3):
            if all(self.board[i][j] == symbol for j in range(3)):
                return True
            if all(self.board[j][i] == symbol for j in range(3)):
                return True
        if all(self.board[i][i] == symbol for i in range(3)):
            return True
        if all(self.board[i][2-i] == symbol for i in range(3)):
            return True
        return False

    def check_draw(self):
        return all(self.board[x][y] is not None for x in range(3) for y in range(3))

class TicTacToeButton(discord.ui.Button):
    def __init__(self, x, y, view):
        super().__init__(label=" ", row=x, style=discord.ButtonStyle.secondary)
        self.x = x
        self.y = y
        self.view = view

    async def callback(self, interaction: discord.Interaction):
        try:
            if self.view.game_over:
                await interaction.response.send_message("ÈÅäÊà≤Â∑≤Á∂ìÁµêÊùü‰∫ÜÂñîÔΩû", ephemeral=True)
                return
            if interaction.user != self.view.current:
                await interaction.response.send_message("ÁèæÂú®‰∏çÊòØ‰Ω†ÁöÑÂõûÂêàÂñîÔºÅ", ephemeral=True)
                return
            
            symbol = "‚≠ï" if self.view.current == self.view.player1 else "‚ùå"
            self.label = symbol
            self.disabled = True
            self.style = discord.ButtonStyle.success if symbol == "‚≠ï" else discord.ButtonStyle.danger
            self.view.board[self.x][self.y] = symbol
            
            # ÂãùË≤†Âà§Êñ∑
            if self.view.check_win(symbol):
                self.view.game_over = True
                for child in self.view.children:
                    child.disabled = True
                # Ë®òÈåÑÂãùÂ†¥
                winner = self.view.current
                if hasattr(self.view.cog, 'leaderboard_manager'):
                    self.view.cog.leaderboard_manager.add_win('tictactoe', winner.id)
                
                try:
                    await interaction.response.edit_message(content=f"üéâ {winner.mention} ({symbol}) Áç≤ÂãùÔºÅ", view=self.view)
                except Exception as e:
                    logger.error(f"[TicTacToe] Áç≤ÂãùË®äÊÅØÁ∑®ËºØÂ§±Êïó: {e}")
                    await interaction.response.send_message(f"üéâ {winner.mention} ({symbol}) Áç≤ÂãùÔºÅ", ephemeral=True)
                
                self.view._cleanup()
            elif self.view.check_draw():
                self.view.game_over = True
                for child in self.view.children:
                    child.disabled = True
                
                try:
                    await interaction.response.edit_message(content="ü§ù Âπ≥ÊâãÔºÅ", view=self.view)
                except Exception as e:
                    logger.error(f"[TicTacToe] Âπ≥ÊâãË®äÊÅØÁ∑®ËºØÂ§±Êïó: {e}")
                    await interaction.response.send_message("ü§ù Âπ≥ÊâãÔºÅ", ephemeral=True)
                
                self.view._cleanup()
            else:
                # Êèõ‰∫∫
                self.view.current = self.view.player2 if self.view.current == self.view.player1 else self.view.player1
                
                try:
                    await interaction.response.edit_message(content=f"Ë´ã {self.view.current.mention} ‰∏ãÊ£ãÔºÅ", view=self.view)
                except Exception as e:
                    logger.error(f"[TicTacToe] Êèõ‰∫∫Ë®äÊÅØÁ∑®ËºØÂ§±Êïó: {e}")
                    await interaction.response.send_message(f"Ë´ã {self.view.current.mention} ‰∏ãÊ£ãÔºÅ", ephemeral=True)
        except Exception as e:
            logger.error(f"[TicTacToeButton] ÂõûË™øËôïÁêÜÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ËôïÁêÜ‰∏ãÊ£ãÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

def get_rps_result(user, bot):
    if user == bot:
        return "Âπ≥Êâã"
    if (user, bot) in [("Ââ™ÂàÄ", "Â∏É"), ("Â∏É", "Áü≥È†≠"), ("Áü≥È†≠", "Ââ™ÂàÄ")]:
        return "‰Ω†Ë¥è‰∫ÜÔºÅ"
    return "‰Ω†Ëº∏‰∫ÜÔΩû"

# Ëá™ÂÆöÁæ©Êï∏Â≠óÈÅ∏ÊìáË¶ñÂúñ
class CustomNumberView(discord.ui.View):
    def __init__(self, user: discord.User, cog):
        super().__init__(timeout=60)
        self.user = user
        self.cog = cog

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user.id

    async def on_timeout(self):
        # Ë∂ÖÊôÇËôïÁêÜ
        try:
            for child in self.children:
                child.disabled = True
            logger.info(f"[CustomNumberView] Ë®≠ÂÆöË∂ÖÊôÇÔºåËá™ÂÆöÁæ©ÁåúÊï∏Â≠óÈÅäÊà≤Â∑≤ÂèñÊ∂à")
        except Exception as e:
            logger.error(f"[CustomNumberView] Ë∂ÖÊôÇËôïÁêÜÂ§±Êïó: {e}")

    @discord.ui.button(label="1-20", style=discord.ButtonStyle.primary, row=0)
    async def range_1_20(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await self.show_number_selector(interaction, 1, 20)
        except Exception as e:
            logger.error(f"[CustomNumberView] 1-20 ÁØÑÂúçÈÅ∏ÊìáÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ÈÅ∏ÊìáÁØÑÂúçÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="21-40", style=discord.ButtonStyle.primary, row=0)
    async def range_21_40(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await self.show_number_selector(interaction, 21, 40)
        except Exception as e:
            logger.error(f"[CustomNumberView] 21-40 ÁØÑÂúçÈÅ∏ÊìáÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ÈÅ∏ÊìáÁØÑÂúçÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="41-60", style=discord.ButtonStyle.primary, row=0)
    async def range_41_60(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await self.show_number_selector(interaction, 41, 60)
        except Exception as e:
            logger.error(f"[CustomNumberView] 41-60 ÁØÑÂúçÈÅ∏ÊìáÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ÈÅ∏ÊìáÁØÑÂúçÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="61-80", style=discord.ButtonStyle.primary, row=1)
    async def range_61_80(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await self.show_number_selector(interaction, 61, 80)
        except Exception as e:
            logger.error(f"[CustomNumberView] 61-80 ÁØÑÂúçÈÅ∏ÊìáÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ÈÅ∏ÊìáÁØÑÂúçÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    @discord.ui.button(label="81-100", style=discord.ButtonStyle.primary, row=1)
    async def range_81_100(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await self.show_number_selector(interaction, 81, 100)
        except Exception as e:
            logger.error(f"[CustomNumberView] 81-100 ÁØÑÂúçÈÅ∏ÊìáÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå ÈÅ∏ÊìáÁØÑÂúçÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

    async def show_number_selector(self, interaction: discord.Interaction, start: int, end: int):
        try:
            # ÂâµÂª∫Êï∏Â≠óÈÅ∏ÊìáÂô®
            view = NumberSelectorView(self.user, self.cog, start, end)
            embed = discord.Embed(
                title=f"üéØ ÈÅ∏ÊìáÊï∏Â≠ó ({start}-{end})",
                description=f"Ë´ãÈÅ∏Êìá {start} Âà∞ {end} ‰πãÈñìÁöÑÊï∏Â≠ó‰ΩúÁÇ∫Ê≠£Á¢∫Á≠îÊ°à",
                color=discord.Color.blue()
            )
            embed.add_field(
                name="ÈÅäÊà≤Ë™™Êòé",
                value="Ë®≠ÂÆöÂÆåÊàêÂæåÔºåÂÖ∂‰ªñÁé©ÂÆ∂ÂèØ‰ª•ÂõûË¶ÜÈÅäÊà≤Ë®äÊÅØ‰æÜÁåúÊ∏¨Êï∏Â≠ó",
                inline=False
            )
            await interaction.response.edit_message(embed=embed, view=view)
        except Exception as e:
            logger.error(f"[CustomNumberView] È°ØÁ§∫Êï∏Â≠óÈÅ∏ÊìáÂô®Â§±Êïó: {e}")
            try:
                await interaction.response.send_message("‚ùå È°ØÁ§∫Êï∏Â≠óÈÅ∏ÊìáÂô®ÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶", ephemeral=True)
            except:
                pass

class NumberSelectorView(discord.ui.View):
    def __init__(self, user: discord.User, cog, start: int, end: int):
        super().__init__(timeout=60)
        self.user = user
        self.cog = cog
        self.start = start
        self.end = end
        self.create_buttons()

    def create_buttons(self):
        # Ê∏ÖÈô§ÁèæÊúâÊåâÈàï
        self.clear_items()
        
        # ÂâµÂª∫Êï∏Â≠óÊåâÈàï (ÊØèË°å5ÂÄã)
        numbers_per_row = 5
        for i in range(self.start, self.end + 1):
            row = (i - self.start) // numbers_per_row
            button = discord.ui.Button(
                label=str(i),
                style=discord.ButtonStyle.secondary,
                row=row
            )
            button.callback = self.create_callback(i)
            self.add_item(button)

    def create_callback(self, number: int):
        async def callback(interaction: discord.Interaction):
            try:
                # Ë®≠ÂÆöËá™ÂÆöÁæ©Êï∏Â≠ó
                self.cog.custom_numbers[interaction.channel.id] = {
                    'number': number,
                    'host': self.user.id
                }
                
                embed = discord.Embed(
                    title="üéØ Ëá™ÂÆöÁæ©ÁåúÊï∏Â≠óÈÅäÊà≤Â∑≤Ë®≠ÂÆöÔºÅ",
                    description=f"**{self.user.mention}** Â∑≤Ë®≠ÂÆöÊ≠£Á¢∫Á≠îÊ°à",
                    color=discord.Color.green()
                )
                embed.add_field(
                    name="ÈÅäÊà≤Ë¶èÂâá",
                    value="‚Ä¢ ÂõûË¶ÜÈÄôÂâáË®äÊÅØ‰∏¶Ëº∏ÂÖ•‰Ω†ÁåúÁöÑÊï∏Â≠ó\n‚Ä¢ ÊàëÊúÉÂëäË®¥‰Ω†ÁåúÁöÑÊï∏Â≠óÊòØÂ§™Â§ßÈÇÑÊòØÂ§™Â∞è\n‚Ä¢ ÁåúÂ∞çÂ∞±Ë¥è‰∫ÜÔºÅ",
                    inline=False
                )
                embed.add_field(
                    name="ÈñãÂßãÁåúÊ∏¨",
                    value="Ë´ãÂõûË¶ÜÈÄôÂâáË®äÊÅØ‰∏¶Ëº∏ÂÖ•‰Ω†ÁöÑÁåúÊ∏¨Êï∏Â≠ó",
                    inline=False
                )
                embed.set_footer(text=f"‰∏ªÊåÅ‰∫∫: {self.user.display_name}")
                
                # Á¶ÅÁî®ÊâÄÊúâÊåâÈàï
                for child in self.children:
                    child.disabled = True
                
                await interaction.response.edit_message(embed=embed, view=self)
                
            except Exception as e:
                logger.error(f"[NumberSelectorView] Ë®≠ÂÆöÊï∏Â≠óÂ§±Êïó: {e}")
            try:
                await interaction.response.send_message(f"‚ùå Ë®≠ÂÆöÊï∏Â≠óÂ§±ÊïóÔºö{str(e)}", ephemeral=True)
            except:
                pass
        
        return callback

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user.id

    async def on_timeout(self):
        # Ë∂ÖÊôÇËôïÁêÜ
        try:
            for child in self.children:
                child.disabled = True
            logger.info(f"[NumberSelectorView] ÈÅ∏ÊìáË∂ÖÊôÇÔºåËá™ÂÆöÁæ©ÁåúÊï∏Â≠óÈÅäÊà≤Â∑≤ÂèñÊ∂à")
        except Exception as e:
            logger.error(f"[NumberSelectorView] Ë∂ÖÊôÇËôïÁêÜÂ§±Êïó: {e}")

async def setup(bot):
    await bot.add_cog(MiniGames(bot))
